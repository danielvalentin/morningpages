<?php defined('SYSPATH') or die('No direct script access.');class Model_User extends Model_Auth_User {		protected $_has_many = array(		'tokens'		=> array('model' => 'User_Token'),		'roles'      		=> array('through' => 'roles_users'),		'pages'				=> array()	);		public function email_available(Validation $validation, $field)	{		if ($this->unique_key_exists($validation[$field], 'email'))		{			$validation->error($field, 'email_available', array($validation[$field]));		}	}		public function username_available(Validation $validation, $field)	{		if ($this->unique_key_exists($validation[$field], 'username'))		{			$validation->error($field, 'username_available', array($validation[$field]));		}	}		public function send_password_email($password)	{		try		{			$mail = mail::create('userautocreated')				->to($this->email)				->tokenise(array(					'username' => $this->username,					'password' => $password				))				->send();			return true;		}		catch(exception $e)		{			log::instance('Couldnt send user autogenerated password', $e);		}		return false;	}		public function delete()	{		foreach($this -> tokens -> find_all() as $token)		{			$token -> delete();		}		foreach($this -> roles -> find_all() as $role)		{			$this -> remove('roles', $role -> id);		}		$pages = $this->pages->find_all();		if((bool)$pages->count())		{			foreach($pages as $page)			{				$page->delete();			}		}		return parent::delete();	}		public function rules()	{		return array(			'username' => array(				array('not_empty'),				array('min_length', array(':value', 2)),				array('max_length', array(':value', 30)),				array(array($this, 'unique'), array('username', ':value'))			),			'password' => array(				array('not_empty'),				array('min_length', array(':value', 5)),				array('max_length', array(':value', 64))			),			'email' => array(				array('email'),				array('not_empty'),				array('min_length', array(':value', 4)),				array('max_length', array(':value', 127)),				array(array($this, 'unique'), array('email', ':value'))			),			'theme' => array(				array(array($this, 'verify_available_theme'), array('theme',':value'))			)		);	}		public function verify_available_theme($field, $theme)	{		return in_array($theme, array('standard','calm','trendy','future'));	}		public static function get_password_validation($values)	{		return Validation::factory($values)			->rule('password', 'min_length', array(':value', 5))			->rule('password_confirm', 'matches', array(':validation', ':field', 'password'));	}		public function get_last_login()	{		return date('d/m, Y', $this -> last_login) . ' kl. ' . date('H:i:s', $this->last_login);	}		public function labels()	{		return array(			'email'		=> 'E-mail',			'password'	=> 'Password',			'username'	=> 'Username',			'theme'		=> 'Your theme'		);	}		public function filters()	{		return array(			'password' => array(				array(array(Auth_ORM::instance(), 'hash'))			),			'username' => array(				array('Security::xss_clean', array(':value'))			),			'email' => array(				array('Security::xss_clean', array(':value'))			),			'theme' => array(				array('Security::xss_clean', array(':value'))			)		);	}		public function has_role($name)	{		foreach($this->roles->find_all() as $role)		{			if($role->name == $name)			{				return true;			}		}
		return false;	}		public function set_roles($roleids = false)	{		$this->remove('roles');		if($roleids)		{			$this->add('roles', $roleids);		}	}		public function save(validation $val = null)	{		if($this->created == 0)		{			$this->created = time();		}		return parent::save($val);	}		public function get_roles()	{		return $this->roles->find_all();	}		public function get_url()	{		return user::url('konto/' . $this->id);	}		public function update_password($data)	{		$data = Validation::factory($data)			-> rule('password', 'not_empty')			-> rule('password', 'min_length', array(':value', 4))			-> rule('password', 'max_length', array(':value', 64))			-> label('password', 'Password')						-> rule('password_confirm', 'not_empty')			-> rule('password_confirm', 'matches', array(':validation', ':field', 'password'))			-> label('password_confirm', 'Password confirm');					if(!$data->check())		{			return $data->errors('validation/user');		}		$this->password = $data['password'];		$this->save();		return false;	}		public function add_role($role = 'login')	{		$role = new Model_Role(array('name' => $role));		$this->add('roles', $role);		$this->save();	}		public function created()	{		return date('F d, Y', $this->created);	}		public function username()	{		return $this->username;	}		public function link()	{		return '<strong>'.$this->username().'</strong>';	}	}