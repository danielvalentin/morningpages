<?php defined('SYSPATH') or die('No direct script access.');class Model_Block extends ORM {		protected $_belongs_to = array(		'content' => array(),		'blocktype' => array(),	);		protected $_has_many = array(		'blocks' => array('foreign_key' => 'parent'),		'files' => array('model' => 'Block_File')	);		protected $_sorting = array(		'order' => 'ASC'	);		// This is a crappy method	public function get_file()	{		$data = json_decode($this->value);		$data = end($data);		$fileblock = $this->files->find();		$data = (array)$data;		$data = array_pop($data);		return array(			'id' => $data->id,			'description' => $data->description,			'alt' => $data->alt,			'file' => $fileblock->file		);	}		// so is this	public function get_content()	{		$content = ORM::factory('Content', $this->value);		if($content->loaded())		{			return $content;		}		return false;	}		public function copy($newcontent_id = false)	{		$newblock = ORM::factory('Block');		$newblock->content_id = $this->content_id;		if($newcontent_id)		{			$newblock->content_id = $newcontent_id;		}		$newblock->blocktype_id = $this->blocktype_id;		$newblock->parent = $this->parent;		$newblock->value = $this->value;		$newblock->collapsed = $this->collapsed;		$newblock->order = $this->order;		$newblock->save();				$files = $this->files->find_all();		if((bool)$files->count())		{			foreach($files as $file)			{				$file->copy($newblock->id);			}		}				$blocks = $this->blocks->find_all();		if((bool)$blocks->count())		{			foreach($blocks as $block)			{				$block->copy($newcontent_id);			}		}			}		public function remove_all_files()	{		/*$files = $this->files->find_all();		if((bool)$files->count())		{			foreach($files as $file)			{				$file->delete();			}		}*/		DB::delete('block_files')			->where('block_id', '=', $this->id)			->execute();	}		public function info()	{		$files = array();		if((bool)$this->files->count_all())		{			foreach($this->files->find_all() as $file)			{				$files[] = $file->info();			}		}				/*$children = array();		if((bool)$this->blocks->count_all())		{			foreach($this->blocks->find_all() as $block)			{				$children[] = $block->info();			}		}*/				return array(			'id' => $this->id,			'parent' => $this->parent,			'order' => $this->order,			'contentid' => $this->content_id,			'blocktype' => $this->blocktype->info(),			'value' => $this->value,			'excerpt' => $this->excerpt(),			'collapsed' => ((bool)$this->collapsed?1:0),			//'children' => $children,			'childCount' => $this->blocks->count_all(),			'files' => $files		);	}		public function excerpt()	{		$excerpt = '';		switch($this->blocktype->type)		{			case 'plaintext':			case 'richtext':			case 'textfield':			case 'selecter':				$content = $this->value;				$content = strip_tags($content);				$length = strlen($content);				$excerpt = substr($content, 0, 50).($length>50?' ...':'');				break;		}		return html_entity_decode($excerpt);	}		public function delete()	{		$kids = ORM::factory('block')->where('parent','=',$this->id)->find_all();		if((bool)$kids->count()) foreach($kids as $kid)		{			$kid->delete();		}		return parent::delete();	}		// This is dumb...	public function __toString()	{		return $this->value;		$class = '';		$id = '';		if(user::logged('admin'))		{			$class = 'contentblock';			$id = 'contentblock-'.$this->id;		}		$block = '<div class="'.$class.'" id="'.$id.'">';		switch($this->blocktype->type)		{			case 'gallery':				$files = $this->files->find_all();				if((bool)$files->count())				{					foreach($files as $file)					{						echo $file->filename;					}				}				break;			default:			case 'text':				$block .= $this->value;				break;		}		$block .= '</div>';		return $block;	}		/**	 * Loads a single block where key = $key. Meant for blocks where max = 1	 */	public function get_block_by_key($key)	{		$block = ORM::factory('Blocktype')->where('contenttype_id','=',$this->content->contenttype_id)->where('key','=',$key)->find();		if($block->loaded())		{			$block = $this->blocks->where('blocktype_id','=',$block->id)->find();			if($block->loaded())			{				return $block;			}		}		return false;	}		/**	 * Loads all blocks where key = $key.	 */	public function get_blocks_by_key($key)	{		$block = ORM::factory('blocktype')			->where('contenttype_id','=',$this->content->contenttype_id)			->where('key','=',$key)			->find();		if((bool)$block->loaded())		{			$block = $this->blocks				->where('blocktype_id','=',$block->id)				//->order_by('order','ASC')				->find_all();			if((bool)$block->count())			{				return $block;			}		}		return false;	}		// alias	public function get_block($key)	{		return $this->get_block_by_key($key);	}		public function get_blocks()	{		return $this->blocks			->where('parent','=',$this->id)			->find_all();	}		public function create(Validation $validation = NULL)	{		$save = parent::create($validation);				$kids = ORM::factory('Blocktype')			->where('parent','=',$this->blocktype_id)			->where('id', '!=', $this->blocktype_id)			->where('min','>',0)			->find_all();		if((bool)$kids->count())		{			$i = 0;			foreach($kids as $kid)			{				for($j=0;$j<$kid->min;$j++)				{					$block = ORM::factory('Block');					$block->content_id = $this->content->id;					$block->blocktype_id = $kid->id;					$block->parent = $this->id;					$block->order = 0;					$block->save();					$i++;				}			}		}				return $save;	}	}