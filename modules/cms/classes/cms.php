<?php defined('SYSPATH') or die('No direct script access.');abstract class cms {		public static function message($type, $subject, $content)	{		$msg = ORM::factory('Cmsmessage');		$msg->type = $type;		$msg->subject = $subject;		$msg->content = $content;		$msg->save();		return $msg;	}		public static function offset($numresults, $limit = 20)	{		$page = (int)arr::get($_GET,'p',1);		$page = $page - 1;		if($page < 0) $page = 0;		$numpages = ceil($numresults/$limit);		if($page > $numpages) $page = $numpages;		return $limit * $page;	}		public static function pagination($numresults, $url, $limit = 20)	{		$page = (int)arr::get($_GET,'p',1);		$page = $page - 1;		if($page < 0) $page = 0;		$numpages = ceil($numresults/$limit);		if($page > $numpages) $page = $numpages;		$offset = $limit * $page;		$pagination = '';		if($numpages > 1)		{			$pagination .= '<ul class="pagination">';			if(strpos($url,'?'))			{				$url .= '&p=';			}			else			{				$url .= '?p=';			}			for($i=1;$i<=$numpages;$i++)			{				$pagination .= '<li class="'.(($page+1)==$i?'active':'').'"><a href="'.$url.$i.'">'.$i.'</a></li>';			}			$pagination .= '<ul>';		}		return $pagination;	}		public static function breadcrumbs($values)	{		$len = count($values);		$html = '<ul class="breadcrumb">';		$i = 1;		$html .= '<li>';		$html .= '<a href="'.cms::url().'" title="CMS">CMS</a>';		$html .= '</li>';		foreach($values as $name => $url)		{			if($len == $i)			{				$html .= '<li class="active">'.$name.'</li>';			}			else			{				$html .= '<li><a href="'.$url.'" title="'.$name.'">'.$name.'</a></li>';			}			$i++;		}		$html .= '</ul>';		return $html;	}		/**	 * Is this the home page?	 * @return Bool	 */	public static function is_home()	{		return request::$current->uri() == '/';			}		/**	 * Get a menu by type	 * to iterate the items in the menu, do $menu->menu_items->find_all()	 * @param String Menutype	 * @return Model_Menu Menu object	 */	public static function get_menu($type)	{		$menutype = ORM::factory('Menutype') -> where('type', '=', $type) -> find();		if($menutype -> loaded())		{			return $menutype -> menu;		}		return false;	}		/**	 * Is this the $controller/$action page?	 * @param String Controller name	 * @param String Action name	 * @return Bool	 */	public static function is_current($controller, $action = false)	{		$c = request::factory()->controller();		$a = request::factory()->action();				if(!$action)		{			if($c == $controller)			{				return true;			}		}		else		{			if($c == $controller && $a == $action)			{				return true;			}		}		return false;	}		/**	 * Gets an option from the DB	 * @param String Key/name of of the option	 * @return String Value	 */	public static function option($key, $default = false)	{		$what = ORM::factory('Option')->where('key', '=', $key)->find();		if($what->loaded())		{			if(!empty($what->value))			{				return $what->value;			}		}		return $default;	}		public static function supports($key)	{		$feature = ORM::factory('Cmsfeature')->where('key','=',$key)->find();		if($feature->loaded())		{			if($feature->value == 1)			{				return true;			}		}		return false;	}		/**	 * Sets an option in the DB	 * @param String Key/Name of option	 * @param Mixed Value of the option	 */	public static function set_option($key, $value)	{		$option = ORM::factory('Option')->where('key', '=', $key)->find();		if(!$option->loaded())		{			$option->key = $key;		}		$option->value = $value;		return $option->save();	}		/**	 * Get the current URI	 * @return String URI	 */	public static function current()	{		return URL::site(request::detect_uri() . (isset($_GET) ? '?' . http_build_query($_GET) : ''), request::factory());	}		public static function get_content_by_type($type, $limit = false, $order_by = 'id', $dir = 'ASC')	{		$contenttype = ORM::factory('Contenttype')->where('type','=',$type)->find();		if($contenttype->loaded())		{			$content = ORM::factory('Content')				->where('contenttype_id','=',$contenttype->id)				->where('status','=','active')				->order_by($order_by, $dir);			if($limit)			{				$content = $content->limit($limit);			}			$content = $content->find_all();			if((bool)$content->count())			{				return $content;			}		}		return false;	}		public static function get_content_by_typetype($typetype, $type, $onlyactive = true)	{		$contenttype = ORM::factory('Contenttype')			->where('type','=',$type)			->find();		$contenttypetype = ORM::factory('Contenttypetype')			->where('key','=',$typetype)			->find();		if($contenttype->loaded() && $contenttypetype->loaded())		{			$content = $contenttypetype				->contents				->where('contenttype_id','=',$contenttype->id);			/*if($onlyactive)			{				$content = $content->where('status','=','active');			}*/			$content = $content->find();			if((bool)$content->loaded())			{				return $content;			}		}		return false;	}		public static function slug()	{		return kohana::$config->load('cms')->get('slug');	}		public static function lang()	{		return kohana::$config->load('cms')->get('lang');	}		/**	 * Get a CMS url.	 * For example: cms::url('users'); = sitename/cms/users	 * @param String Path	 * @param String Protocol	 * @return String URL	 */	public static function url($path = '', $protocol = false)	{		return URL::site(self::slug().'/'.$path, $protocol);	}		/**	 * Do a redirect to the CMS	 * @param String CMS path to redirect to	 * @return String void	 */	public static function redirect($path = '')	{		HTTP::redirect(kohana::$config->load('cms')->get('slug') . '/' . $path);		die();	}		/**	 * Gets the username of the currently logged in user	 * @return String Username	 * @TODO Move to user helper	 */	public static function username()	{		return Auth_ORM::instance()->get_user()->get_name();	}		/**	 * Joins, caches and serves CSS files.	 * When there are changes a new file will be created otherwise it'll serve the cached version.	 * Automatically cleans up the cache folder as well.	 * @param Array css files.	 * @param bool Cache the files?	 * @return String Link tag for the cached file	 */	public static function css(Array $files, $cache = true)	{		$cssname = md5(implode('',$files)) . '.css';		$cssname = '';		foreach($files as $file)		{			if((strpos($file, 'http://') === false ) && strpos($file, '.css') && file_exists('modules/cms/' . $file))			{				$cssname .= $file . filemtime('modules/cms/' . $file);			}			else			{				$cssname .= $file;			}		}		$cssname = md5($cssname) . '.css';		if(!file_exists('modules/cms/media/cache/' . $cssname))		{			$content = '';			foreach($files as $file)			{				if( ( strpos($file, 'http') !== false ) || file_exists('modules/cms/' . $file) )				{					if(strpos($file, 'http') !== false)					{						$content .= file_get_contents($file);					}					else					{						$content .= file_get_contents('modules/cms/' . $file);					}				}			}			file_put_contents('modules/cms/media/cache/' . $cssname, $content);			unset($content);			$oldfiles = glob('modules/cms/media/cache/*.css'); // Cleaning up the cache folder			if($oldfiles > 1)			{				foreach($oldfiles as $oldfile)				{					if(time() - filemtime($oldfile) > Date::MINUTE)					{						unlink($oldfile);					}				}			}		}		return HTML::style('cms/media/cache/' . $cssname);	}		/**	 * Joins, caches and serves JS files.	 * When there are changes a new file will be created otherwise it'll serve the cached version.	 * Automatically cleans up the cache folder as well.	 * @param Array js files.	 * @return String script tag to cached file.	 * @param String Script tag for the cached file	 */	public static function js(Array $files)	{		$start = time();		$jsname = '';		foreach($files as $file)		{			if((strpos($file, 'http://') === false ) && strpos($file, '.js') && file_exists('modules/cms/' . $file))			{				$jsname .= $file . filemtime('modules/cms/' . $file);			}			else			{				$jsname .= $file;			}		}		$jsname = md5($jsname) . '.js';		if(!file_exists('modules/cms/media/cache/' . $jsname))		{			$content = '';			foreach($files as $file)			{				if((strpos($file, '.js')===false) || (strpos($file, 'http://') !== false ) || file_exists('modules/cms/' . $file)) // Check if local file exists (don't check external files - we trust google [and don't want to bother with timeouts etc when checking])				{					if((strpos($file, 'http://') !== false ))					{						$content .= file_get_contents($file);					}					else					{						$content .= file_get_contents('modules/cms/' . $file);					}				}			}			file_put_contents('modules/cms/media/cache/' . $jsname, $content);			unset($content);			$oldfiles = glob('modules/cms/media/cache/*.js'); // Cleaning up the cache folder			if($oldfiles > 1)			{				foreach($oldfiles as $oldfile)				{					if(time() - filemtime($oldfile) > Date::MINUTE)					{						unlink($oldfile);					}				}			}		}		return HTML::script('cms/media/cache/' . $jsname);	}	}