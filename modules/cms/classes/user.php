<?php defined('SYSPATH') or die('No direct script access.');abstract class user {		public static function slug($uri = false)	{		return self::path($uri);		$slug = kohana::$config->load('user')->get('slug');		if($uri)		{			$slug .= '/' . $uri;		}		return $slug;	}		public static function create($data)	{		$user = ORM::factory('User');		$data['created'] = time();		$user->create_user($data, array(			'file_id',			'name',			'bio',			'password',			'email',			'created'		));		$user->add_role('login');		/*$mail = mail::create('usercreated')			->to($user->email)			->tokenize(array('name' => $user->username))			->send();*/	}		public static function randompass()	{		$alphabet = "abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ0123456789";		$pass = array();		$alphaLength = strlen($alphabet) - 1;		for ($i = 0; $i < 8; $i++)		{		    $n = rand(0, $alphaLength);		    $pass[] = $alphabet[$n];		}		return implode($pass);	}		public static function path($to = '')	{		$url = localization::get('users.urls.base');		switch($to)		{			case 'login':				$url = localization::get('users.urls.login');				break;			case 'new':				$url = localization::get('users.urls.new');				break;			case 'logout':				$url = localization::get('users.urls.logout');				break;			case '':			case 'base':				$url = localization::get('users.urls.base');				break;			default:				$url = $url.'/'.$to;		}		return $url;	}		public static function redirect($to = '', $code = 302)	{		http::redirect(self::path($to), $code);		die();	}		public static function logged($role = null)	{		return Auth_ORM::instance()->logged_in($role);	}		public static function url($uri = '', $protocol = NULL)	{		$url = localization::get('users.urls.'.$uri);		return URL::site($url, $protocol);	}		public static function _url($uri = '', $protocol = NULL)	{		return url::site(self::slug($uri), $protocol);	}		public static function hascompany()	{		return (user::logged() && (bool)user::get()->companies->count_all());	}		public static function get()	{		return Auth_ORM::instance()->get_user();	}		public static function force_login($user)	{		return Auth_ORM::instance()->force_login($user);	}		public static function login($username, $password, $remember = false)	{		return Auth_ORM::instance()->login($username, $password, $remember);	}		public static function logout()	{		return Auth_ORM::instance()->logout();	}	}